#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

if [ -x "$(command -v pacman)" ]; then
  sudo pacman -Syu
  sudo pacman -S --needed \
    wget curl \
    base-devel inetutils cmake \
    bpytop lm_sensors lsof strace \
    ripgrep ripgrep-all \
    hub \
    shellcheck \
    rubygems \
    lua luarocks \
    perl \
    python python-pip\
    python2 \
    python-neovim pyenv \
    fzf \
    go \
    lazygit
  if ! [ -x "$(command -v yay)" ]; then
    cd /tmp &&\
    git clone https://aur.archlinux.org/yay.git &&\
    cd yay &&\
    makepkg -si &&\
    cd
  fi
  yay -S --needed neovim-git python2-pynvim python-neovim ruby-neovim xclip neovim-remote
fi

export XDG_CONFIG_HOME=$HOME/.config
BINS=$XDG_CONFIG_HOME/bin
mkdir -p "$BINS"

case "$OSTYPE" in
  solaris*) OS="solaris" ;;
  darwin*)  OS="OSX" ;;
  linux*)   OS="LINUX" ;;
  bsd*)     OS="BSD" ;;
  msys*)    OS="WINDOWS" ;;
esac

# ln -sf "$HOME/.config/yadm/git-redirect" "$HOME/.git"

### zim (zsh config manager)
# https://github.com/zimfw/zimfw
zsh "$XDG_CONFIG_HOME/zsh/zim/zimfw.zsh" upgrade || true
zsh "$XDG_CONFIG_HOME/zsh/zim/zimfw.zsh" install
zsh "$XDG_CONFIG_HOME/zsh/zim/zimfw.zsh" update

# Install base16 (Color schemes for the terminal)
BASE16DIR=~/.config/base16-shell
git clone https://github.com/chriskempson/base16-shell.git $BASE16DIR 2> /dev/null || (cd "$BASE16DIR" ; git pull)

# Install git subrepo
GITSUBREPODIR=~/.config/git-subrepo
git clone https://github.com/ingydotnet/git-subrepo $GITSUBREPODIR 2> /dev/null || (cd "$GITSUBREPODIR" ; git pull)

export PYENV_ROOT=~/.config/pyenv
if ! [ -d "$PYENV_ROOT" ]; then
  curl https://pyenv.run | bash
fi
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
set +u
eval "$(pyenv virtualenv-init -)" || true
set -u
pyenv update
# Get latest available python 2 and 3 versions
# PY2VER=$(pyenv install --list | grep -v 'dev\|b\|rc\|-\|alpha' | grep '2\.7.\+' -o | tail -1)
PY2VER='2.7.18'
pyenv install "$PY2VER" -s
pyenv virtualenvs --skip-aliases | grep neovim2 || pyenv virtualenv "$PY2VER" neovim2
set +u; pyenv activate neovim2; set -u
pyenv exec pip install --upgrade pip
pyenv exec pip install --upgrade wheel
pyenv exec pip install --upgrade neovim

# PY3VER=$(pyenv install --list | grep -v 'dev\|b\|rc\|-\|alpha' | grep '3\..\+' -o | tail -1)
PY3VER='3.10.7'
pyenv install "$PY3VER" -s
CUR_PY3VER=$(pyenv virtualenvs --skip-aliases | grep neovim3 | cut -d/ -f1 | tr -d ' ')
if ! [ "$CUR_PY3VER" = "$PY3VER" ]; then
  echo "Found newer python version, uninstalling old virtualenv"
  pyenv virtualenv-delete -f neovim3
fi
pyenv virtualenvs --skip-aliases | grep neovim3 || pyenv virtualenv "$PY3VER" neovim3
set +u; pyenv activate neovim3; set -u
pyenv exec pip install --upgrade pip
pyenv exec pip install --upgrade wheel
pyenv exec pip install --upgrade neovim flake8 mypy pylint black neovim-remote
pyenv exec pip install --upgrade ipython ipdb ptpython


# move all paths ending in 'sbin' to the back of PATH
# This is needed because pyenv fails to find the system python otherwise
for SB in $(echo "$PATH" | grep ':*/[^:]*sbin' -o)
do
  PATH="${PATH/$SB}:${SB#:}"
done

if [[ ! "$OS" == "OSX" ]]; then
  # Set global version to system version
  pyenv global system
  set +u; pyenv deactivate; set -u

  # Install pip and python stuff
  if ! [ -x "$(command -v pip)" ]; then
    cd /tmp
    wget https://bootstrap.pypa.io/get-pip.py
    python get-pip.py --user
  fi
  # Install same stuff as for neovim3 env (and maybe more stuff)
  pip install --user wheel
  pip install --user neovim-remote
  pip install --user neovim flake8 mypy pylint black
  pip install --user ipython ipdb ptpython
else
  # Don't trust macOS with anything, always use the python from pyenv...
  # Set global version to system version
  pyenv global $PY3VER
  set +u; pyenv activate; set -u
  pip install wheel
  pip install neovim-remote
  pip install neovim flake8 mypy pylint black
  pip install ipython ipdb ptpython
fi

### Setup fzf (fuzzy finder)
# https://github.com/junegunn/fzf
# Don't need this, because the vim plugin installs this
# FZFDIR=$XDG_CONFIG_HOME/fzf
# git clone --depth 1 "https://github.com/junegunn/fzf.git" "$FZFDIR" 2> /dev/null || (cd "$FZFDIR" ; git pull)
# "$FZFDIR/install" --xdg --completion --key-bindings --update-rc
# ln -sf "$FZFDIR" ~/.fzf



# Skip all of this stuff, because we already installed it with pacman
if ! [ -x "$(command -v pacman)" ]; then
  # Install homebrew START
  # I only use brew to install small binaries without many dependencies, because the binary version
  # of many bigger packages only work when there is a user called homebrew set up
  if ! [ -x "$(command -v brew)" ]; then
    BREW_DIR=~/.linuxbrew/Homebrew
    mkdir -p $BREW_DIR
    echo created brew dir
    git clone https://github.com/Homebrew/brew "${BREW_DIR}" 2> /dev/null || (cd "$BREW_DIR" ; git pull)
    ln -sf "${BREW_DIR}/bin/brew" "${BINS}"
  fi
  eval "$(brew shellenv)"
  brew update
  #brew upgrade -v --force-bottle
  # Install homebrew END

  # Install ripgrep binary if it's not available
  if ! [ -x "$(command -v rg)" ]; then
    brew install ripgrep ripgrep-all --force-bottle
    # ripgrep-all adds the rga binary that can also search in PDFS, .docs, zip, etc.
  fi

  if ! [ -x "$(command -v lazygit)" ]; then
    brew install lazygit
  fi

  # Install hub (Github Client) binary if it's not available
  if ! [ -x "$(command -v hub)" ]; then
    brew install ncurses util-linux gettext hub --force-bottle
    # ncurses and util-linux are dependencies and brew tries to build them without installing them
    # explicitly with --force-bottle
  fi

  # Install Shellcheck (bash linter) if it's not available
  if ! [ -x "$(command -v shellcheck)" ]; then
    brew install shellcheck --force-bottle
  fi

  # Install lua
  # brew install lua luarocks
fi

# Install ruby stuff if ruby is available
if ! [ -x "$(command -v gem)" ]; then
  gem install rubocop pry pry-byebug coderay neovim
  gem update
fi

# Install npm/node with nvm, Install yarn with npm. (For vim stuff)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
# shellcheck source=../../.config/nvm/nvm.sh # shellcheck can't resolve ~ or $HOME for some reason
\. "${XDG_CONFIG_HOME}/nvm/nvm.sh" 2> /dev/null || true # This loads nvm
# Ignore the errors from loading nvm because it errors out if the current version isn't set right
# Set a version instead of just stable, because the lazy loading in .zshrc needs that
NODEVER="$(nvm version-remote stable)"
set +u
nvm install "$NODEVER"
nvm alias default "$NODEVER"
nvm use "$NODEVER"
npm install -g yarn neovim vim-language-server pyright
yarn global add neovim vim-language-server pyright
set -u

# Install perl stuff (just for neovim, probably useless...)
# PLENV_DIR=$HOME/.plenv
# git clone https://github.com/tokuhirom/plenv.git $PLENV_DIR 2> /dev/null || (cd "$PLENV_DIR" ; git pull)
# export PATH="$PLENV_DIR/bin:$PATH"
# eval "$(plenv init -)"
# PB_DIR=$PLENV_DIR/plugins/perl-build/
# git clone https://github.com/tokuhirom/Perl-Build.git $PB_DIR 2> /dev/null || (cd "$PB_DIR" ; git pull)
#
# CPANM_DIR=$HOME/perl5/bin
# if [ ! -d "$CPANM_DIR" ]; then
#   plenv install-cpanm
# fi

# Install vim stuff


VIM_DIR=$XDG_CONFIG_HOME/nvim

# Get latest spellfiles for german and english
mkdir -p "$VIM_DIR/spell"
cd "$VIM_DIR/spell"
wget -c -N http://ftp.vim.org/pub/vim/runtime/spell/{de,en}.utf-8.{spl,sug}
cd
mkdir -p "$VIM_DIR/undodir"
mkdir -p "$VIM_DIR/tmp/swap"
mkdir -p "$VIM_DIR/tmp/backup"
# Install neovim if it's missing
if ! [ -x "$(command -v nvim)" ]; then
  brew install nvim --HEAD
fi

nvim '+PlugUpgrade' '+PlugClean!' '+PlugInstall!' '+qall'
